{"ast":null,"code":"import axios from \"axios\";\nimport { SET_CURRENT_USER, SUCCESSFUL_REGISTER, FAILURE_REGISTER, ERRORS, AUTH_ERROR, SUCCESSFUL_LOGIN, FAILURE_LOGIN, LOGOUT } from \"./types\";\nimport { getServer } from \"../util\";\nimport setAuthToken from \"../util/setAuthToken\"; //SET A USER\n\nexport const setCurrentUser = user => async dispatch => {\n  if (localStorage.token) {\n    setAuthToken(localStorage.token);\n  }\n\n  try {\n    const res = await axios.get(`${getServer()}/api/auth`);\n    dispatch({\n      type: SET_CURRENT_USER,\n      payload: res.data\n    });\n  } catch (err) {\n    dispatch({\n      type: AUTH_ERROR\n    });\n  }\n\n  return {\n    type: SET_CURRENT_USER,\n    payload: user\n  };\n}; //REGISTER A USER\n\nexport const register = userData => async dispatch => {\n  const config = {\n    headers: {\n      \"Content-Type\": \"application/json\"\n    }\n  };\n\n  try {\n    const res = await axios.post(`${getServer()}/api/users`, userData, config);\n    console.log;\n    dispatch({\n      type: SUCCESSFUL_REGISTER,\n      payload: res.data\n    });\n    dispatch(setCurrentUser());\n  } catch (err) {\n    const error = err.response.data.errors;\n\n    if (error) {\n      dispatch({\n        type: ERRORS,\n        payload: error\n      });\n    } else {\n      dispatch({\n        type: FAILURE_REGISTER\n      });\n    }\n  }\n}; //login user\n\nexport const login = userData => async dispatch => {\n  const config = {\n    headers: {\n      \"Content-Type\": \"application/json\"\n    }\n  };\n\n  try {\n    const res = await axios.post(`${getServer()}/api/auth`, userData, config);\n    dispatch({\n      type: SUCCESSFUL_LOGIN,\n      payload: res.data\n    });\n    dispatch(setCurrentUser());\n  } catch (err) {\n    const error = err.response.data.errors;\n\n    if (error) {\n      dispatch({\n        type: ERRORS,\n        payload: error\n      });\n    } else {\n      dispatch({\n        type: FAILURE_LOGIN\n      });\n    }\n  }\n\n  ;\n};\nexport const logout = () => dispatch => dispatch({\n  type: LOGOUT\n});","map":{"version":3,"sources":["D:/RestaurantWebsite/restaurant/src/actions/authActions.js"],"names":["axios","SET_CURRENT_USER","SUCCESSFUL_REGISTER","FAILURE_REGISTER","ERRORS","AUTH_ERROR","SUCCESSFUL_LOGIN","FAILURE_LOGIN","LOGOUT","getServer","setAuthToken","setCurrentUser","user","dispatch","localStorage","token","res","get","type","payload","data","err","register","userData","config","headers","post","console","log","error","response","errors","login","logout"],"mappings":"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","sourcesContent":["import axios from \"axios\";\r\nimport {SET_CURRENT_USER, SUCCESSFUL_REGISTER, FAILURE_REGISTER, ERRORS, AUTH_ERROR, SUCCESSFUL_LOGIN, FAILURE_LOGIN, LOGOUT} from \"./types\";\r\n\r\nimport {getServer} from \"../util\";\r\nimport setAuthToken from \"../util/setAuthToken\";\r\n\r\n//SET A USER\r\nexport const setCurrentUser = (user) => async (dispatch) => {\r\n    if(localStorage.token){\r\n        setAuthToken(localStorage.token);\r\n    }\r\n    try {\r\n        const res = await axios.get(`${getServer()}/api/auth`);\r\n        dispatch({\r\n            type : SET_CURRENT_USER,\r\n            payload: res.data,\r\n        });\r\n    } catch (err) {\r\n        dispatch({\r\n            type: AUTH_ERROR,\r\n        });\r\n    }\r\n    return{\r\n        type: SET_CURRENT_USER,\r\n        payload: user,\r\n    };\r\n};\r\n\r\n//REGISTER A USER\r\nexport const register = (userData) => async dispatch =>{\r\n    const config = {\r\n        headers:{\r\n            \"Content-Type\":\"application/json\",\r\n        },\r\n    };\r\n    try {\r\n        const res = await axios.post(`${getServer()}/api/users`, userData, config);\r\n        console.log\r\n        dispatch({\r\n            type: SUCCESSFUL_REGISTER,\r\n            payload: res.data,\r\n        });\r\n        dispatch(setCurrentUser());\r\n    } catch (err) {\r\n        const error = err.response.data.errors;\r\n        if (error){\r\n            dispatch({\r\n                type: ERRORS,\r\n                payload: error,\r\n            });\r\n        }else {\r\n            dispatch({\r\n                type: FAILURE_REGISTER,\r\n            });\r\n        }    \r\n    }\r\n};\r\n\r\n//login user\r\nexport const login = (userData) => async dispatch =>{\r\n    const config = {\r\n        headers:{\r\n            \"Content-Type\":\"application/json\",\r\n        },\r\n    };\r\n    try {\r\n        const res = await axios.post(`${getServer()}/api/auth`, userData, config);\r\n        dispatch({\r\n            type: SUCCESSFUL_LOGIN,\r\n            payload: res.data,\r\n        });\r\n        dispatch(setCurrentUser());\r\n    } catch (err) {\r\n        const error = err.response.data.errors;\r\n        if (error){\r\n            dispatch({\r\n                type: ERRORS,\r\n                payload: error,\r\n            });\r\n        }else {\r\n            dispatch({\r\n                type: FAILURE_LOGIN,\r\n            });\r\n        }\r\n    };\r\n};\r\n\r\nexport const logout = () => (dispatch) => dispatch({type: LOGOUT});"]},"metadata":{},"sourceType":"module"}